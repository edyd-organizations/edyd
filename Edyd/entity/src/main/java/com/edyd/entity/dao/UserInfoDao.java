package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dao.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SessionUUID = new Property(1, String.class, "sessionUUID", false, "SESSION_UUID");
        public final static Property MobilePhoneNumber = new Property(2, String.class, "mobilePhoneNumber", false, "MOBILE_PHONE_NUMBER");
        public final static Property EnterpriseId = new Property(3, String.class, "enterpriseId", false, "ENTERPRISE_ID");
        public final static Property EnterpriseName = new Property(4, String.class, "enterpriseName", false, "ENTERPRISE_NAME");
        public final static Property RoleId = new Property(5, String.class, "roleId", false, "ROLE_ID");
        public final static Property AccountId = new Property(6, String.class, "accountId", false, "ACCOUNT_ID");
        public final static Property TenantId = new Property(7, String.class, "tenantId", false, "TENANT_ID");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SESSION_UUID\" TEXT," + // 1: sessionUUID
                "\"MOBILE_PHONE_NUMBER\" TEXT," + // 2: mobilePhoneNumber
                "\"ENTERPRISE_ID\" TEXT," + // 3: enterpriseId
                "\"ENTERPRISE_NAME\" TEXT," + // 4: enterpriseName
                "\"ROLE_ID\" TEXT," + // 5: roleId
                "\"ACCOUNT_ID\" TEXT," + // 6: accountId
                "\"TENANT_ID\" TEXT);"); // 7: tenantId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionUUID = entity.getSessionUUID();
        if (sessionUUID != null) {
            stmt.bindString(2, sessionUUID);
        }
 
        String mobilePhoneNumber = entity.getMobilePhoneNumber();
        if (mobilePhoneNumber != null) {
            stmt.bindString(3, mobilePhoneNumber);
        }
 
        String enterpriseId = entity.getEnterpriseId();
        if (enterpriseId != null) {
            stmt.bindString(4, enterpriseId);
        }
 
        String enterpriseName = entity.getEnterpriseName();
        if (enterpriseName != null) {
            stmt.bindString(5, enterpriseName);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(6, roleId);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(7, accountId);
        }
 
        String tenantId = entity.getTenantId();
        if (tenantId != null) {
            stmt.bindString(8, tenantId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sessionUUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mobilePhoneNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // enterpriseId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // enterpriseName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // roleId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // accountId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // tenantId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionUUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobilePhoneNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEnterpriseId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEnterpriseName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoleId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccountId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTenantId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
